{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":30840,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# 1. Import neccessary libraries","metadata":{}},{"cell_type":"code","source":"!pip install transformers datasets rouge-score bert-score sentence-transformers accelerate -q","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-30T06:04:05.062241Z","iopub.execute_input":"2025-01-30T06:04:05.062566Z","iopub.status.idle":"2025-01-30T06:04:12.965549Z","shell.execute_reply.started":"2025-01-30T06:04:05.062534Z","shell.execute_reply":"2025-01-30T06:04:12.964717Z"}},"outputs":[{"name":"stdout","text":"  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m61.1/61.1 kB\u001b[0m \u001b[31m2.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25h  Building wheel for rouge-score (setup.py) ... \u001b[?25l\u001b[?25hdone\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom transformers import (\n    AutoTokenizer,\n    AutoModelForSeq2SeqLM,\n    DataCollatorForSeq2Seq,\n    Seq2SeqTrainingArguments,\n    Seq2SeqTrainer\n)\nfrom datasets import Dataset\nimport torch\nfrom rouge_score import rouge_scorer\nfrom bert_score import score\nfrom sentence_transformers import SentenceTransformer","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-30T06:04:14.991534Z","iopub.execute_input":"2025-01-30T06:04:14.991844Z","iopub.status.idle":"2025-01-30T06:04:16.381640Z","shell.execute_reply.started":"2025-01-30T06:04:14.991821Z","shell.execute_reply":"2025-01-30T06:04:16.380984Z"}},"outputs":[],"execution_count":7},{"cell_type":"markdown","source":"# 2. Load dataset","metadata":{}},{"cell_type":"code","source":"splits = {\n    'train': 'dbpedia_14/train-00000-of-00001.parquet',\n    'test': 'dbpedia_14/test-00000-of-00001.parquet'\n}\n\ndef safe_load(path):\n    df = pd.read_parquet(\"hf://datasets/fancyzhx/dbpedia_14/\" + path)\n    df['content'] = df['content'].astype(str).str.strip()\n    df['title'] = df['title'].astype(str).str.strip() \n    return df\n\ntrain = safe_load(splits[\"train\"])\ntest = safe_load(splits[\"test\"])\n\ndef safe_load(path, sample_ratio=0.1):\n    df_full = pd.read_parquet(\"hf://datasets/fancyzhx/dbpedia_14/\" + path)\n    df = df_full.sample(frac=sample_ratio, random_state=42)    \n    df['content'] = df['content'].astype(str).str.strip()\n    df['title'] = df['title'].astype(str).str.strip()\n    return df\n\n# Due to the dataset is too large, I need to sort out some data for training model\ntrain = safe_load(splits[\"train\"]).head(25000)\ntest = safe_load(splits[\"test\"]).head(4000)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-30T06:04:18.647824Z","iopub.execute_input":"2025-01-30T06:04:18.648120Z"}},"outputs":[{"name":"stderr","text":"'(ReadTimeoutError(\"HTTPSConnectionPool(host='huggingface.co', port=443): Read timed out. (read timeout=10)\"), '(Request ID: a2ae305d-aaa2-4d30-9cc6-d3956b525b4a)')' thrown while requesting GET https://huggingface.co/datasets/fancyzhx/dbpedia_14/resolve/main/dbpedia_14/train-00000-of-00001.parquet\nRetrying in 1s [Retry 1/5].\n'(ReadTimeoutError(\"HTTPSConnectionPool(host='huggingface.co', port=443): Read timed out. (read timeout=10)\"), '(Request ID: ce1da379-7484-4d4e-bfb0-cc4bf161f53f)')' thrown while requesting GET https://huggingface.co/datasets/fancyzhx/dbpedia_14/resolve/main/dbpedia_14/train-00000-of-00001.parquet\nRetrying in 1s [Retry 1/5].\n'(ReadTimeoutError(\"HTTPSConnectionPool(host='huggingface.co', port=443): Read timed out. (read timeout=10)\"), '(Request ID: 63cdf308-3b70-4a1d-98b4-12e9f6ae6709)')' thrown while requesting GET https://huggingface.co/datasets/fancyzhx/dbpedia_14/resolve/main/dbpedia_14/train-00000-of-00001.parquet\nRetrying in 1s [Retry 1/5].\n","output_type":"stream"}],"execution_count":null},{"cell_type":"markdown","source":"# 3. EDA","metadata":{}},{"cell_type":"code","source":"print(\"=== Data Sanity Check ===\")\nprint(\"Data (5 top rows):\")\ndisplay(train[['title', 'content']].head())\n\nprint(\"\\nData:\")\nprint(f\"train: {len(train)}\")\nprint(f\"test: {len(test)}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T17:49:49.780761Z","iopub.execute_input":"2025-01-29T17:49:49.781062Z","iopub.status.idle":"2025-01-29T17:49:49.795583Z","shell.execute_reply.started":"2025-01-29T17:49:49.781040Z","shell.execute_reply":"2025-01-29T17:49:49.794865Z"}},"outputs":[{"name":"stdout","text":"=== Data Sanity Check ===\nData (5 top rows):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"                            title  \\\n34566      Sterling Piano Company   \n223092                NYC S-Motor   \n110270         Axel Zwingenberger   \n365013   Sceptrophasma hispidulum   \n311625  Nucet River (Chiojdeanca)   \n\n                                                  content  \n34566   The Sterling Piano Company was a piano manufac...  \n223092  S-Motor was the class designation given by the...  \n110270  Axel Zwingenberger (born May 7 1955 Hamburg Ge...  \n365013  Sceptrophasma hispidulum commonly known as the...  \n311625  The Nucet River is a tributary of the Chiojdea...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>content</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>34566</th>\n      <td>Sterling Piano Company</td>\n      <td>The Sterling Piano Company was a piano manufac...</td>\n    </tr>\n    <tr>\n      <th>223092</th>\n      <td>NYC S-Motor</td>\n      <td>S-Motor was the class designation given by the...</td>\n    </tr>\n    <tr>\n      <th>110270</th>\n      <td>Axel Zwingenberger</td>\n      <td>Axel Zwingenberger (born May 7 1955 Hamburg Ge...</td>\n    </tr>\n    <tr>\n      <th>365013</th>\n      <td>Sceptrophasma hispidulum</td>\n      <td>Sceptrophasma hispidulum commonly known as the...</td>\n    </tr>\n    <tr>\n      <th>311625</th>\n      <td>Nucet River (Chiojdeanca)</td>\n      <td>The Nucet River is a tributary of the Chiojdea...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"\nData:\ntrain: 25000\ntest: 4000\n","output_type":"stream"}],"execution_count":40},{"cell_type":"code","source":"def safe_text_length(text_series):\n    return text_series.apply(lambda x: len(x.split()) if isinstance(x, str) else 0)\n\ntrain['content_len'] = safe_text_length(train['content'])\ntrain['title_len'] = safe_text_length(train['title'])\n\nplt.figure(figsize=(12, 5))\nplt.subplot(1, 2, 1)\nsns.histplot(train['content_len'], bins=50, kde=True, color='blue')\nplt.title('Content Length Distribution')\nplt.xlabel('Words')\nplt.xlim(0, 512)\n\nplt.subplot(1, 2, 2)\nsns.histplot(train['title_len'], bins=30, kde=True, color='green')\nplt.title('Title Length Distribution')\nplt.xlabel('Words')\nplt.xlim(0, 64)\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T17:49:56.029250Z","iopub.execute_input":"2025-01-29T17:49:56.029562Z","iopub.status.idle":"2025-01-29T17:49:56.804141Z","shell.execute_reply.started":"2025-01-29T17:49:56.029535Z","shell.execute_reply":"2025-01-29T17:49:56.803256Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/usr/local/lib/python3.10/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x500 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":41},{"cell_type":"markdown","source":"# 4. Data Preprocessing","metadata":{}},{"cell_type":"code","source":"def format_data(examples):\n    return {\n        'text': ['summarize: ' + text for text in examples['content']],\n        'summary': examples['title']\n    }\n\ntrain_dataset = Dataset.from_pandas(train[['content', 'title']])\ntest_dataset = Dataset.from_pandas(test[['content', 'title']])\n\ntrain_dataset = train_dataset.map(format_data, batched=True)\ntest_dataset = test_dataset.map(format_data, batched=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T17:50:00.025576Z","iopub.execute_input":"2025-01-29T17:50:00.025912Z","iopub.status.idle":"2025-01-29T17:50:00.311559Z","shell.execute_reply.started":"2025-01-29T17:50:00.025882Z","shell.execute_reply":"2025-01-29T17:50:00.310668Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/25000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"fd2e799bf06e46eaaf563a19f583c028"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7184bebf7cee4236947561d8a705794d"}},"metadata":{}}],"execution_count":42},{"cell_type":"markdown","source":"# 5. Tokenization","metadata":{}},{"cell_type":"code","source":"model_name = \"facebook/bart-base\"\ntokenizer = AutoTokenizer.from_pretrained(model_name)\n\ndef tokenize_function(examples):\n    model_inputs = tokenizer(\n        examples['text'],\n        max_length=512,\n        truncation=True,\n        padding='max_length',\n        return_tensors='pt'\n    )\n    \n    with tokenizer.as_target_tokenizer():\n        labels = tokenizer(\n            examples['summary'],\n            max_length=64,\n            truncation=True,\n            padding='max_length',\n            return_tensors='pt'\n        )\n    \n    return {\n        'input_ids': model_inputs['input_ids'],\n        'attention_mask': model_inputs['attention_mask'],\n        'labels': labels['input_ids']\n    }\n\ntokenized_train = train_dataset.map(tokenize_function, batched=True, batch_size=256)\ntokenized_test = test_dataset.map(tokenize_function, batched=True, batch_size=256)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T17:50:03.094059Z","iopub.execute_input":"2025-01-29T17:50:03.094364Z","iopub.status.idle":"2025-01-29T17:50:14.071649Z","shell.execute_reply.started":"2025-01-29T17:50:03.094337Z","shell.execute_reply":"2025-01-29T17:50:14.070704Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/25000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2ab00892f10b4db59581219cea606ea0"}},"metadata":{}},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/transformers/tokenization_utils_base.py:3953: UserWarning: `as_target_tokenizer` is deprecated and will be removed in v5 of Transformers. You can tokenize your labels by using the argument `text_target` of the regular `__call__` method (either in the same call as your input texts if you use the same keyword arguments, or in a separate call.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"46207fb6a2f74ab691fb0cb6f0aeaa5f"}},"metadata":{}}],"execution_count":43},{"cell_type":"markdown","source":"# 6. Training set up","metadata":{}},{"cell_type":"code","source":"model = AutoModelForSeq2SeqLM.from_pretrained(model_name)\ndata_collator = DataCollatorForSeq2Seq(tokenizer, model=model)\n\ntraining_args = Seq2SeqTrainingArguments(\n    output_dir=\"./results\",\n    evaluation_strategy=\"steps\",\n    eval_steps=1000,\n    save_steps=1000,\n    logging_steps=200,\n    learning_rate=2e-5,\n    per_device_train_batch_size=8,\n    per_device_eval_batch_size=8,\n    gradient_accumulation_steps=4,\n    fp16=True,\n    warmup_steps=500,\n    num_train_epochs=1,\n    predict_with_generate=True,\n    load_best_model_at_end=True,\n    metric_for_best_model=\"eval_loss\",\n    report_to=\"none\"\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T17:50:16.406154Z","iopub.execute_input":"2025-01-29T17:50:16.406468Z","iopub.status.idle":"2025-01-29T17:50:17.260726Z","shell.execute_reply.started":"2025-01-29T17:50:16.406440Z","shell.execute_reply":"2025-01-29T17:50:17.259767Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/transformers/training_args.py:1575: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n  warnings.warn(\n","output_type":"stream"}],"execution_count":44},{"cell_type":"markdown","source":"# 7. Evaluating model","metadata":{}},{"cell_type":"code","source":"def compute_metrics(eval_pred):\n    preds, labels = eval_pred\n    decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)\n    \n    # ตรวจสอบ labels ที่เป็น -100\n    labels = np.where(labels != -100, labels, tokenizer.pad_token_id)\n    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)\n    \n    # คำนวณ ROUGE\n    rouge = rouge_scorer.RougeScorer(['rouge1', 'rouge2', 'rougeL'], use_stemmer=True)\n    rouge_scores = [rouge.score(ref, pred) for ref, pred in zip(decoded_labels, decoded_preds)]\n    \n    # คำนวณ BERTScore\n    P, R, F1 = score(decoded_preds, decoded_labels, lang='en', rescale_with_baseline=True)\n    \n    # คำนวณ Cosine Similarity\n    sbert = SentenceTransformer('paraphrase-MiniLM-L6-v2')\n    embeddings_pred = sbert.encode(decoded_preds)\n    embeddings_ref = sbert.encode(decoded_labels)\n    cosine_sim = np.diag(cosine_similarity(embeddings_pred, embeddings_ref))\n    \n    print(f\"\\n[Evaluation Metrics]\")\n    print(f\"ROUGE-1: {np.mean([s['rouge1'].fmeasure for s in rouge_scores]):.4f}\")\n    print(f\"ROUGE-2: {np.mean([s['rouge2'].fmeasure for s in rouge_scores]):.4f}\")\n    print(f\"ROUGE-L: {np.mean([s['rougeL'].fmeasure for s in rouge_scores]):.4f}\")\n    print(f\"BERTScore F1: {F1.mean().item():.4f}\")\n    print(f\"Cosine Similarity: {np.mean(cosine_sim):.4f}\")\n    \n    return metrics","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-30T05:59:29.255858Z","iopub.execute_input":"2025-01-30T05:59:29.256054Z","iopub.status.idle":"2025-01-30T05:59:29.262306Z","shell.execute_reply.started":"2025-01-30T05:59:29.256034Z","shell.execute_reply":"2025-01-30T05:59:29.261528Z"}},"outputs":[],"execution_count":1},{"cell_type":"markdown","source":"# 8. Training model","metadata":{}},{"cell_type":"code","source":"trainer = Seq2SeqTrainer(\n    model=model,\n    args=training_args,\n    train_dataset=tokenized_train,\n    eval_dataset=tokenized_test,\n    data_collator=data_collator,\n    tokenizer=tokenizer,\n    compute_metrics=compute_metrics\n)\n\ntrainer.train()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T17:50:38.462272Z","iopub.execute_input":"2025-01-29T17:50:38.462550Z","iopub.status.idle":"2025-01-29T18:09:04.586354Z","shell.execute_reply.started":"2025-01-29T17:50:38.462528Z","shell.execute_reply":"2025-01-29T18:09:04.585648Z"}},"outputs":[{"name":"stderr","text":"<ipython-input-47-81fe14a2cc4f>:1: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Seq2SeqTrainer.__init__`. Use `processing_class` instead.\n  trainer = Seq2SeqTrainer(\n/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='390' max='390' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [390/390 18:22, Epoch 0/1]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Step</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table><p>"},"metadata":{}},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/transformers/modeling_utils.py:2817: UserWarning: Moving the following attributes in the config to the generation config: {'early_stopping': True, 'num_beams': 4, 'no_repeat_ngram_size': 3, 'forced_bos_token_id': 0}. You are seeing this warning because you've set generation parameters in the model config, as opposed to in the generation config.\n  warnings.warn(\n","output_type":"stream"},{"execution_count":47,"output_type":"execute_result","data":{"text/plain":"TrainOutput(global_step=390, training_loss=5.24792723044371, metrics={'train_runtime': 1105.4176, 'train_samples_per_second': 22.616, 'train_steps_per_second': 0.353, 'total_flos': 7609510998835200.0, 'train_loss': 5.24792723044371, 'epoch': 0.9980806142034548})"},"metadata":{}}],"execution_count":47},{"cell_type":"markdown","source":"# 9. Evaluation Results","metadata":{}},{"cell_type":"code","source":"test_sample = test.sample(50, random_state=42)\npredictions = [\n    tokenizer.decode(\n        model.generate(\n            tokenizer(\"summarize: \" + text, return_tensors=\"pt\", max_length=512, truncation=True).input_ids.to(model.device),\n            max_length=64\n        )[0],\n        skip_special_tokens=True\n    )\n    for text in test_sample['content']\n]\n\nprint(\"\\n=== Results sample ===\")\nfor i in range(3):\n    print(f\"\\nfinal_sample: {test_sample['content'].iloc[i][:200]}...\")\n    print(f\"finel_test: {test_sample['title'].iloc[i]}\")\n    print(f\"final_model: {predictions[i]}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T18:09:49.973299Z","iopub.execute_input":"2025-01-29T18:09:49.973611Z","iopub.status.idle":"2025-01-29T18:09:54.319004Z","shell.execute_reply.started":"2025-01-29T18:09:49.973587Z","shell.execute_reply":"2025-01-29T18:09:54.318289Z"}},"outputs":[{"name":"stdout","text":"\n=== Results sample ===\n\nfinal_sample: Codonocalyx was a genus of flowering plants in the Rubiaceae family but is no longer recognized. It has been sunk into synonymy with Psychotria....\nfinel_test: Codonocalyx\nfinal_model: Codonocalyx\n\nfinal_sample: Wallace Harper Burnette (June 20 1929 – February 12 2003) was an American professional baseball player who pitched for the Kansas City Athletics from 1956-1958. He was born in Blairs Virginia.In three...\nfinel_test: Wally Burnette\nfinal_model: Harrison Burnette\n\nfinal_sample: Passage Meditation is a book by Eknath Easwaran originally published in 1978 with the title Meditation. The book describes a meditation program also now commonly referred to as Passage Meditation. Eas...\nfinel_test: Passage Meditation\nfinal_model: Passage Meditation\n","output_type":"stream"}],"execution_count":48},{"cell_type":"code","source":"import os\n\n# ตรวจสอบไฟล์ในโฟลเดอร์ results\ncheckpoint_dirs = [d for d in os.listdir(\"./results\") if d.startswith(\"checkpoint-\")]\nprint(\"Checkpoints ที่บันทึกไว้:\")\nfor d in checkpoint_dirs:\n    print(d)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-30T06:02:50.968845Z","iopub.execute_input":"2025-01-30T06:02:50.969125Z","iopub.status.idle":"2025-01-30T06:02:50.984813Z","shell.execute_reply.started":"2025-01-30T06:02:50.969103Z","shell.execute_reply":"2025-01-30T06:02:50.983518Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-fbdb62607468>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# ตรวจสอบไฟล์ในโฟลเดอร์ results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mcheckpoint_dirs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0md\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0md\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlistdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"./results\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0md\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"checkpoint-\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Checkpoints ที่บันทึกไว้:\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0md\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcheckpoint_dirs\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: './results'"],"ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: './results'","output_type":"error"}],"execution_count":4}]}
